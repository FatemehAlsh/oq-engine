#!/bin/env python
# -*- coding: utf-8 -*-
# vim: tabstop=4 shiftwidth=4 softtabstop=4
#
# Copyright (C) 2023, GEM Foundation
#
# OpenQuake is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# OpenQuake is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with OpenQuake.  If not, see <http://www.gnu.org/licenses/>.

import os
import logging
import pandas
import numpy
from openquake.baselib import sap, performance
from openquake.hazardlib import nrml
from openquake.risklib.riskmodels import CompositeRiskModel, RiskFuncList
from openquake.commonlib.datastore import build_dstore_log
from openquake.commonlib.oqvalidation import OqParam
from openquake.commonlib import expo_to_hdf5
from openquake.qa_tests_data import mosaic

U16 = numpy.uint16
MOSAIC_DIR = os.path.dirname(mosaic.__file__)


def collect_exposures(grm_dir):
    """
    Collect the files of kind Exposure_<Country>.xml.

    :returns: xmlfiles
    """
    out = []
    for region in os.listdir(grm_dir):
        expodir = os.path.join(grm_dir, region, 'Exposure', 'Exposure')
        if not os.path.exists(expodir):
            continue
        for fname in os.listdir(expodir):
            if fname.startswith('Exposure_'):  # i.e. Exposure_Chile.xml
                fullname = os.path.join(expodir, fname)
                out.append(fullname)
    return out


def read_world_vulnerability(grm_dir, dstore):
    """
    Store the world CompositeRiskModel
    """
    kinds = ['structural', 'nonstructural', 'contents', 'area', 'number',
             'fatalities', 'residents']
    vfuncs = RiskFuncList()
    for kind in kinds:
        name = f'Vulnerability/vulnerability/vulnerability_{kind}.xml'
        fname = os.path.join(grm_dir, name)
        for vf in nrml.to_python(fname).values():
            vf.loss_type = 'occupants' if kind == 'fatalities' else kind
            vf.kind = 'vulnerability'
            vfuncs.append(vf)
    oq = OqParam(calculation_mode='custom')
    crmodel = CompositeRiskModel(oq, vfuncs)
    dstore.create_df('crm', crmodel.to_dframe(),
                     'gzip', **crmodel.get_attrs())
    return len(vfuncs)


def read_world_tmap(grm_dir, dstore):
    """
    Store the world taxonomy mapping
    """
    # get the names of the files to read
    tmap_df = pandas.read_csv(os.path.join(MOSAIC_DIR, 'taxonomy_mapping.csv'),
                              index_col=['country'])
    dic = {}
    for fname, df in tmap_df.groupby('fname'):
        dic[fname] = '_'.join(sorted(df.index))
    n = len(dic)
    assert len(set(dic.values())) == n, sorted(dic.values())
    for cwd, dirs, files in os.walk(grm_dir):
        for f in files:
            if f in dic:
                df = pandas.read_csv(os.path.join(cwd, f))
                try:
                    dstore.create_df('tmap/' + dic[f], df)
                except ValueError:  # exists already
                    print('Repeated %s' % dic[f])
    return n


def main(grm_dir):
    """
    Storing global exposure
    """
    mon = performance.Monitor(measuremem=True)
    dstore, log = build_dstore_log()
    with dstore, log:
        with mon:
            n = read_world_vulnerability(grm_dir, dstore)
            logging.info('Read %d vulnerability functions', n)
            n = read_world_tmap(grm_dir, dstore)
            logging.info('Read %d taxonomy mappings', n)
            fnames = collect_exposures(grm_dir)
            expo_to_hdf5.store(fnames, dstore)
        logging.info(mon)


main.grm_dir = 'global risk model directory'


if __name__ == '__main__':
    sap.run(main)
